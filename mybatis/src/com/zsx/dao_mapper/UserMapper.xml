<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在实际开发中，对象的SQL配置文件通常遵循4个原则
	1.命名空间一般为对象的DAO接口类的全类名
	2.SQL语句的id值与接口中的方法名一致
	3.SQL语句的传入参数的类型与接口中的方法的传入参数的类型一致
	4.SQL语句的返回类型与接口中的方法返回类型一致
 -->
<mapper namespace="com.zsx.dao_mapper.UserMapper">
	<!-- 常用标签6个，cache,cache-ref,paramaterMap不用
		insert:添加操作
			SQL语句标签常用属性
			    id:当前查询的名称 
			    parameterType:要注入的参数的类型，包装类
			   		当入参为基本类型时，直接填写基本类型如Integer
			   		当入参为POJO类型时，填写POJO类名，大小写均可一般大写（sqlMapConfig配置了包范围类型别名）使用：#{字段名}
			   		当入参为POJO封装类型时，填写封装类名，大小写均可一般大写，使用：#{封装类的字段名.POJO的字段名}
			    resultType:自动封装返回的结果需要封装成的对象的完整类名或别名（配置后不区分大小写一般大写），一个对象自动封装，一个集合自动封装后放入集合
			   		自动封装的前提：数据库表的字段与实体的字段相同
			    resultMap:手动封装返回的结果
			   		手动封装：填写外部resultMap的id
		delete:删除操作
		update:更新操作
		select:查询操作
		sql:sql片段
		resultMap:结果映射，当自动映射不好用时采用手动映射（可以半自动映射）
			属性
			id:自身的引用
			type:需要封装成的POJO类型
			子标签（半自动：只需要将名称不对应的字段配置即可）
				id：当id不一致时，需要配置
				result：其他部分不一致时需要配置
				子标签属性
					column：数据库列名
					property：POJO字段名
	 -->
	 <!-- sql语句里的占位符表示：#{} 占位符里面的东西随便写
	 	#{value} 相当于 'value'	value可以写任意字符串，当入参为某个对象类型时，value为它对应的字段
	 	${value} 相当于   value	value只能是value，不能更改
	  -->
	<select id="findUserById" parameterType="Integer" resultType="User"><!-- resultType:此处配置了类型别名 -->
		select *
		from user
		where id = #{v}
	</select>
	<!-- 
		模糊查询like '%${value}%'	(不用)		不防sql注入
					"%"#{username}"%"	防sql注入
	 -->
	<select id="findUsersByName" parameterType="com.zsx.pojo.User" resultType="com.zsx.pojo.User">
		select *
		from user
		where username like "%"#{username}"%"
	</select>
	<!-- 
		selectKey:插入时，如果要得到返回的id，需要使用selectKey标签
			keyProperty:要返回的主键需要存放的位置
			resultType :返回的主键类型
			order	   :是在数据写入之前获取id或是写入之后获取id
			select LAST_INSERT_ID():是MySql数据库里自带的方法，获取最近插入的数据的id
	 -->
	<insert id="saveUser" parameterType="com.zsx.pojo.User">
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username, sex, birthday, address)
		values(#{username}, #{sex}, #{birthday}, #{address})
	</insert>
	
	<update id="updateUserById" parameterType="com.zsx.pojo.User">
		update user
		set username = #{username}, sex = #{sex}, birthday = #{birthday}, address = #{address}
		where id = #{id}
	</update>
	
	<delete id="deleteUserById" parameterType="com.zsx.pojo.User">
		delete from user
		where id = #{id}
	</delete>
	
	<!-- 封装User到QueryVo，通过user中的username来模糊查询user-->
	<select id="findUsersByQueryVo" parameterType="QueryVo" resultType="User">
		select * from user
		where username like "%"#{user.username}"%"
	</select>
	
	<!-- 查询user表中数据的数目 -->
	<select id="countUsers" resultType="Integer">
		select count(*) from user
	</select>
	
	<!-- sql片段用于提取出公共部分的sql语句 -->
	<sql id="selectUserAll">
		select * from user
	</sql>
	
	<!-- 通过性别或名称来查询用户 -->
	<select id="findUsersBySexOrUsername" parameterType="User" resultType="User">
		<!-- 使用sql片段时需要使用include标签引入 -->
		<include refid="selectUserAll"></include>
		<!-- where标签将自动去掉第一个前and单词 -->
		<where>
			<!-- test中填写规则：与用and 或用or 属性直接写名称 -->
			<if test="sex != null and sex != ''">
				and sex = #{sex}
			</if>
			<if test="username != null and username != ''">
				and username like "%"#{username}"%"
			</if>
		</where>
	</select>
	
	<!-- 根据数个id来查询数个用户(foreach遍历) -->
	<!-- 
		使用到foreach时
		当入参为数组时:不需要写parameterType
		当入参为集合时:不需要写parameterType
		当入参为QueryVo对象时:填写parameterType="QueryVo"类型的入参
	 -->
	<select id="findUsersByIds" resultType="User">
		<include refid="selectUserAll"></include>
		<where>
			<!-- 
				foreach:循环遍历搜索条件
					collection:传入的参数集合
						传入Array数组：填写array
						传入List集合：填写list
						传入一个QueryVo对象，对象中封装的是Array数组或List集合：填写QueryVo的字段名
					item:循环遍历的项的名称（随便取，下面#{item}取值）
					separator:循环遍历的每一项中间的分隔符
					open:在循环开始前加入的字符串
					close:在循环结束后加入的字符串
			 -->
			<foreach collection="array" item="id" separator="," open="id in (" close=")">
				#{id}
			</foreach>
		</where>
	</select>
	
	<!-- 一对多关系通过用户id来查询用户及其订单信息 -->
	<select id="findUserOrdersById" parameterType="Integer" resultMap="userOrders">
		select u.*,o.id oid,o.number
		from user u
		left join orders o
		on u.id = o.user_id
		where u.id = #{id}
	</select>
	<!-- 一对多关系同样不能省略任何属性与字段的对应，多表查询都不行 -->
	<resultMap type="User" id="userOrders">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="birthday" property="birthday"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		<!-- 一对多关系采用collection标签来关联字段
			ofType:表示集合的泛型
			select:表示选取的结果集，参数（另一个sql语句的id）
		 -->
		<collection property="orders" ofType="Orders">
			<id column="oid" property="id"/>
			<result column="number" property="number"/>
		</collection>
	</resultMap>
</mapper>